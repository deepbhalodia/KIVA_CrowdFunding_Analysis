ungroup() %>%
mutate(country = reorder(country,Count)) %>%
head(10) %>%
ggplot(aes(x = country,y = Count)) +
geom_bar(stat='identity',colour="white", fill = "Light coral") +
geom_text(aes(x = country, y = 1, label = paste0("(",Count,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Countries',
y = 'Count',
title = 'Countries and Count') +
coord_flip() +
theme_bw()
}
plotmap_by_country <- function(country_loans)
{
center_lon = median(country_loans$lon,na.rm = TRUE)
center_lat = median(country_loans$lat,na.rm = TRUE)
leaflet(country_loans) %>% addTiles() %>%
addCircles(lng = ~lon, lat = ~lat,radius = ~(amount/10) ,
color ="Orange")  %>%
# controls
setView(lng=center_lon, lat=center_lat,zoom = 3)
}
country_loans = themes_region %>%
filter(str_detect(world_region,"Africa"))
barplot_by_country(country_loans)
plotmap_by_country(country_loans)
#Importing the data
ConflictsData =  read_csv("african_conflicts.csv", col_types = cols(
.default = col_character(),
FATALITIES = col_integer(),
GEO_PRECISION = col_integer(),
GWNO = col_integer(),
INTER1 = col_integer(),
INTER2 = col_integer(),
INTERACTION = col_integer(),
LATITUDE = col_number(),
LONGITUDE = col_number(),
TIME_PRECISION = col_integer(),
YEAR = col_integer()
))
#Importing the data
ConflictsData =  read_csv("african_conflicts.csv", col_types = cols(
.default = col_character(),
FATALITIES = col_integer(),
GEO_PRECISION = col_integer(),
GWNO = col_integer(),
INTER1 = col_integer(),
INTER2 = col_integer(),
INTERACTION = col_integer(),
LATITUDE = col_number(),
LONGITUDE = col_number(),
TIME_PRECISION = col_integer(),
YEAR = col_integer()
))
#Identifying areas where there is Battle
keyword = "Battle"
battle_data = ConflictsData %>%
filter(!is.na(LATITUDE)) %>%
filter(!is.na(LONGITUDE)) %>%
filter(str_detect(EVENT_TYPE,keyword) )
battle_data_20162017 = battle_data %>% filter(YEAR >= 2016)
center_lon = median(battle_data$LONGITUDE)
center_lat = median(battle_data$LATITUDE)
leaflet(battle_data_20162017) %>% addTiles() %>%
addCircles(lng = ~LONGITUDE, lat = ~LATITUDE,radius = ~(FATALITIES),
color = "orange")  %>%
# controls
setView(lng=center_lon, lat=center_lat, zoom=3)
conflict_countries <- battle_data_20162017 %>%
group_by(COUNTRY) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
ungroup() %>%
mutate(COUNTRY = reorder(COUNTRY,Count)) %>%
head(10)
conflict_countries %>%
ggplot(aes(x = COUNTRY,y = Count)) +
geom_bar(stat='identity',colour="white", fill = c("red")) +
geom_text(aes(x = COUNTRY, y = 1, label = paste0("(",Count,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Country',
y = 'Count',
title = 'High Conflict Countries and Count') +
coord_flip() +
theme_bw()
african_loans <- reg_loc%>%
select(country,world_region) %>%
unique() %>%
inner_join(loan) %>%
filter(str_detect(world_region,"Africa"))
conflict_countries <- battle_data_20162017 %>%
group_by(COUNTRY) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
head(20)
conflict_countries_loans <- inner_join(african_loans,conflict_countries,
by =c("country" = "COUNTRY")) %>%
group_by(country) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
conflict_countries_loans %>%
ungroup() %>%
mutate(country = reorder(country,Count)) %>%
ggplot(aes(x = country,y = Count)) +
geom_bar(stat='identity',colour="white", fill = "gold") +
geom_text(aes(x = country, y = 1, label = paste0("(",Count,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Battle affected Countries',
y = 'Loan Count',
title = 'Battle affected Countries and Loan Count') +
coord_flip() +
theme_bw()
african_loans %>%
select(funded_amount) %>%
summary()
median(loan$funded_amount)
country_loans = themes_region_combined %>%
filter(str_detect(world_region,"America"))
country_loans = themes_region %>%
filter(str_detect(world_region,"America"))
unique(country_loans$world_region)
country_loans = themes_region %>%
filter(str_detect(world_region,"America"))
barplot_by_country(country_loans)
country_loans = themes_region %>%
filter(str_detect(world_region,"Asia"))
barplot_by_country(country_loans)
country_loans = themes_region %>%
filter(str_detect(world_region,"Asia"))
barplot_by_country(country_loans)
mpi_national = read_csv('../input/mpi/MPI_national.csv')
mpi_national = read_csv('MPI_national.csv')
mpi_subnational = read_csv('MPI_subnational.csv')
mpi_national = read_csv('MPI_national.csv')
mpi_subnational = read_csv('MPI_subnational.csv')
continents<-read_csv("countries and continents")
mpi_national = read_csv('MPI_national.csv')
mpi_subnational = read_csv('MPI_subnational.csv')
continents<-read_csv("countries and continents.csv")
countries_continents = countries_continents %>%
select(name,Continent)
continents = countries_continents %>%
select(name,Continent)
continents = countries_continents %>%
select(name,Continent)
continents = continents %>%
select(name,Continent)
mpi_national_continent = inner_join(mpi_national,countries_continents,by =c('Country'= 'name'))
continents = continents %>%
select(name,Continent)
mpi_national_continent = inner_join(mpi_national,continents,by =c('Country'= 'name'))
poor_countries_rural <- mpi_national_continent %>%
filter(Continent == 'AS') %>%
rename(MPIRural = `MPI Rural`) %>%
arrange(desc(MPIRural)) %>%
head(15) %>%
select(Country,MPIRural)
treemap(poor_countries_rural,
index="Country",
vSize = "MPIRural",
title="Poorest Countries Rural Perspective",
palette = "RdBu",
fontsize.title = 14
)
asian_loans <- regions %>%
select(country,world_region) %>%
unique() %>%
inner_join(loans) %>%
filter(str_detect(world_region,"Asia"))
asian_loans <- reg_loc %>%
select(country,world_region) %>%
unique() %>%
inner_join(loans) %>%
filter(str_detect(world_region,"Asia"))
asian_loans <- reg_loc %>%
select(country,world_region) %>%
unique() %>%
inner_join(loan) %>%
filter(str_detect(world_region,"Asia"))
poor_countries_loans <- inner_join(AsianLoans,poor_countries_rural,
by =c("country" = "Country")) %>%
group_by(country) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
asian_loans <- reg_loc %>%
select(country,world_region) %>%
unique() %>%
inner_join(loan) %>%
filter(str_detect(world_region,"Asia"))
poor_countries_loans <- inner_join(asian_loans,poor_countries_rural,
by =c("country" = "Country")) %>%
group_by(country) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
as.tibble(setdiff(poor_countries_rural$Country,poor_countries_loans$country))
country_loans = themes_region_combined %>%
filter(str_detect(world_region,"America"))
country_loans = themes_region %>%
filter(str_detect(world_region,"America"))
barplot_by_country(country_loans)
poor_countries_rural <- mpi_national_continent %>%
filter(Continent == 'SA') %>%
rename(MPIRural = `MPI Rural`) %>%
arrange(desc(MPIRural)) %>%
head(15) %>%
select(Country,MPIRural)
treemap(poor_countries_rural,
index="Country",
vSize = "MPIRural",
title="Poorest Countries Rural Perspective",
palette = "RdBu",
fontsize.title = 14
)
american_loans <- regions %>%
select(country,world_region) %>%
unique() %>%
inner_join(loans) %>%
filter(str_detect(world_region,"America"))
american_loans <- reg_loc %>%
select(country,world_region) %>%
unique() %>%
inner_join(loans) %>%
filter(str_detect(world_region,"America"))
american_loans <- reg_loc %>%
select(country,world_region) %>%
unique() %>%
inner_join(loan) %>%
filter(str_detect(world_region,"America"))
poor_countries_loans <- inner_join(AmericasLoans,poor_countries_rural,
by =c("country" = "Country")) %>%
group_by(country) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
american_loans <- reg_loc %>%
select(country,world_region) %>%
unique() %>%
inner_join(loan) %>%
filter(str_detect(world_region,"America"))
poor_countries_loans <- inner_join(american_loans,poor_countries_rural,
by =c("country" = "Country")) %>%
group_by(country) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
as.tibble(setdiff(poor_countries_rural$Country,poor_countries_loans$country))
loans_funded_amount = loan %>%
group_by(country) %>%
summarise(FundedAmount = sum(funded_amount)) %>%
arrange(desc(FundedAmount)) %>%
ungroup() %>%
mutate(country = reorder(country,FundedAmount)) %>%
head(20)
treemap(loans_funded_amount,
index="country",
vSize = "FundedAmount",
title="Funded Amount",
palette = "RdBu",
fontsize.title = 14
)
install.packages("treemap")
knitr::opts_chunk$set(echo = TRUE)
library("readxl")
flood_dataset <- read_excel("flood.xlsx")
View(country_loans)
View(flood_dataset)
View(flood_dataset)
flood_dataset <- read_excel("flood.xlsx")
View(flood_dataset)
flood_dataset <- read_excel("flood.xlsx")
flood_join<- inner_join(reg_loc,flood_dataset,
by =c("country" = "Country")) %>%
group_by(country) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
View(flood_join)
reg_loc%>% left_join(flood_dataset, by=c("country" = "Country") )
reg_loc%>%
left_join(flood_dataset, by=c("country" = "Country") )%>%
group_by(country)%>%
arrange(desc(`Annual Average`))%>%
top_n(10)
reg_loc%>%
left_join(flood_dataset, by=c("country" = "Country") )%>%
group_by(country)%>%
arrange(desc(`Annual Average`))
reg_loc%>%
left_join(flood_dataset, by=c("country" = "Country") )%>%
group_by(country)%>%
arrange(desc(`Annual Average`))%>%
ungroup() %>%
mutate(COUNTRY = reorder(COUNTRY,Count)) %>%
head(10)
reg_loc%>%
left_join(flood_dataset, by=c("country" = "Country") )%>%
group_by(country)%>%
arrange(desc(`Annual Average`))%>%
ungroup() %>%
mutate(COUNTRY = reorder(country,Count)) %>%
head(10)
flood_join<- inner_join(reg_loc,flood_dataset,
by =c("country" = "Country"))
flood_join<- inner_join(reg_loc,flood_dataset,
by =c("country" = "Country"))
View(flood_join)
reg_loc%>%
left_join(flood_dataset, by=c("country" = "Country") )
flood_join<-
arrange(desc(`Annual Average`))%>%
View(flood_join)
View(flood_join)
flood_join<-
arrange(desc(`Annual Average`))%>%
top_n(10)
flood_dataset <- read_excel("flood.xlsx")
flood_join<-
arrange(desc(`Annual Average`))%>%
filter(top_n(10))
flood_join<-
arrange(desc(`Annual Average`))%>%
filter(top_n(10))
flood_join<-
arrange(desc(`Annual Average`))%>%
summarise(count=n())%>%
top_n(10)
flood_join<-
group_by(country)
loan %>%
group_by(country) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
ungroup() %>%
mutate(country = reorder(country,Count)) %>%
head(10) %>%
ggplot(aes(x = country,y = Count)) +
geom_bar(stat='identity',colour="white", fill = "Light coral") +
geom_text(aes(x = country, y = 1, label = paste0("(",Count,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Countries',
y = 'Count',
title = 'Countries and Count') +
coord_flip() +
theme_bw()
flood_dataset<-
group_by(Country)
flood_dataset<-
group_by(Country)%>%
arrange(desc(`Annual Average`))%>%
summarise(count=n())%>%
top_n(10)
flood_dataset$Rank[1:10,]
flood_dataset[1:10,]
flood_arrange<-flood_dataset[1:10,]
top_loan<-loan %>%
group_by(country) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
ungroup() %>%
mutate(country = reorder(country,Count)) %>%
head(10)
top_loan%>%
ggplot(aes(x = country,y = Count)) +
geom_bar(stat='identity',colour="white", fill = "Light coral") +
geom_text(aes(x = country, y = 1, label = paste0("(",Count,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Countries',
y = 'Count',
title = 'Countries and Count') +
coord_flip() +
theme_bw()
as.tibble(setdiff(flood_arrange$Country,top_loan$country))
flood_dataset <- read_excel("flood.xlsx")
flood_arrange<-flood_dataset[1:20,]
top_loan<-loan %>%
group_by(country) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
ungroup() %>%
mutate(country = reorder(country,Count)) %>%
head(20)
top_loan%>%
ggplot(aes(x = country,y = Count)) +
geom_bar(stat='identity',colour="white", fill = "Light coral") +
geom_text(aes(x = country, y = 1, label = paste0("(",Count,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Countries',
y = 'Count',
title = 'Countries and Count') +
coord_flip() +
theme_bw()
as.tibble(setdiff(flood_arrange$Country,top_loan$country))
flood_dataset <- read_excel("flood.xlsx")
flood_arrange<-flood_dataset[1:10,]
top_loan<-loan %>%
group_by(country) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) %>%
ungroup() %>%
mutate(country = reorder(country,Count)) %>%
head(10)
top_loan%>%
ggplot(aes(x = country,y = Count)) +
geom_bar(stat='identity',colour="white", fill = "Light coral") +
geom_text(aes(x = country, y = 1, label = paste0("(",Count,")",sep="")),
hjust=0, vjust=.5, size = 4, colour = 'black',
fontface = 'bold') +
labs(x = 'Countries',
y = 'Count',
title = 'Countries and Count') +
coord_flip() +
theme_bw()
as.tibble(setdiff(flood_arrange$Country,top_loan$country))
data(world.cities)
world_cities <- world.cities
loan <- read_csv("kiva_loans.csv")
package_install_load <- function(x)
{
if (!require(x, character.only = TRUE))
{
install.packages(x, dep = TRUE)
if (!require(x, character.only = TRUE))
{
stop('Package not found')
}
}
}
## Block - Load Required Packages
packages <- c("ggplot2","gridExtra","dplyr","sqldf","readr","tidytext","tidyr"
,"maps","lubridate","treemap","stringi","stringr","rlang","plyr","tidyverse")
invisible(lapply(packages, package_install_load))
set_workspace <- function(dir_path)
{
#dir.create(dir_path) # Create Directory
setwd(dir_path) #Set Working Directory
print(paste("Working Directory Set to : ",dir_path)) # Print Message
}
## Setting Workspace
#set_workspace("C:/Users/K/Downloads/DS5110 Project");
set_workspace("/Users/deep/DMDP/KIVA");
loan <- read_csv("kiva_loans.csv")
loan_raw <- loan
reg_loc <- read_csv("kiva_mpi_region_locations.csv")
reg_loc_raw <- reg_loc
theme <- read_csv("loan_theme_ids.csv")
theme_raw <- theme
theme_reg <- read_csv("loan_themes_by_region.csv")
theme_reg_raw <- theme_reg
data(world.cities)
world_cities <- world.cities
head(loan)
glimpse(loan)
head(reg_loc)
glimpse(reg_loc)
head(theme)
glimpse(theme)
head(theme_reg)
glimpse(theme_reg)
summary(loan)
summary(reg_loc)
summary(theme)
summary(theme_reg)
#Lets identify the total funded amount by Kiva to the field agents
total_funded_amnt <- sum(loan$funded_amount)
total_funded_amnt
#separate funded time into years only, group by years and indentify the analysis
loan <- loan %>% mutate(funding_year = year(funded_time))
#Unique observation where kiva has active loans
reg_loc <- unique(reg_loc[, !(colnames(reg_loc) %in% c("geo"))])
loan <- unique(loan[, !(colnames(loan) %in% c("date"))])
theme <- unique(theme[, !(colnames(theme) %in% c("id"))])
#theme_reg_raw <- unique(theme_reg[, !(colnames(theme_reg) %in% c("Partner ID"))])
loan <- loan %>% mutate(gender = ifelse(str_detect(borrower_genders, "female"), "female", "male"))
#levels of sector
table(loan$sector)
#levels of repayment interval
table(loan$repayment_interval)
#levels of gender
table(loan$gender)
#summary statsistics of funded amount by kiva
summary(loan$funded_amount)
#Measurement poverty index
summary(reg_loc$MPI)
#identifying which columns with observations across the table is not having missing values
colSums(!is.na(reg_loc))
#identify whuch columns with observations across the table has missing values
colSums(is.na(reg_loc))
#Lets remove the records where MPI is missing, since there will be no meaning of the other variables
reg_loc <- reg_loc %>%
filter(!is.na(MPI))
#level of world regions
table(reg_loc$world_region)
#identify which columns with observations across the table has missing values
colSums(is.na(theme_reg))
#level of sector of field agents
table(theme_reg$sector)
table(theme_reg$`Loan Theme Type`)
#identify whuch columns with observations across the table has missing values
colSums(is.na(theme))
colnames(world_cities) <- gsub("\\.", "_", colnames(world_cities))
reg_loc <- sqldf("select wc.*, world_region,MPI, country, region from world_cities wc
left join reg_loc rl on wc.country.etc = rl.country")
colnames(world_cities) <- gsub("\\.", "_", colnames(world_cities))
reg_loc <- sqldf("select wc.*, world_region,MPI, country, region from world_cities wc
left join reg_loc rl on wc.country_etc = rl.country")
#natural join by country and region
loan_reg_loc <- loan %>%
left_join(reg_loc, by=c("country"="country"))
